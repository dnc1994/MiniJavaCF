(goal (mainClass class BinaryTree { public static void main ( String [ ] a ) { (statement (printStatement System.out.println ( (expression (atom (nonAtom new BT ( )) . Start ( ))) ) ;)) } }) (classDeclaration class BT { (methodDeclaration public (type int) Start ( ) { (varDeclaration (type Tree) root ;) (varDeclaration (type boolean) ntb ;) (varDeclaration (type int) nti ;) (statement (assignment root = (rightValue (nonAtom new Tree ( ))) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom root) . Init ( (callList (rightValue (expression (atom 16)))) )))) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom root) . Print ( )))) ;)) (statement (printStatement System.out.println ( (expression (atom 100000000)) ) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom root) . Insert ( (callList (rightValue (expression (atom 8)))) )))) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom root) . Print ( )))) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom root) . Insert ( (callList (rightValue (expression (atom 24)))) )))) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom root) . Insert ( (callList (rightValue (expression (atom 4)))) )))) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom root) . Insert ( (callList (rightValue (expression (atom 12)))) )))) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom root) . Insert ( (callList (rightValue (expression (atom 20)))) )))) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom root) . Insert ( (callList (rightValue (expression (atom 28)))) )))) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom root) . Insert ( (callList (rightValue (expression (atom 14)))) )))) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom root) . Print ( )))) ;)) (statement (printStatement System.out.println ( (expression (atom (nonAtom root) . Search ( (callList (rightValue (expression (atom 24)))) ))) ) ;)) (statement (printStatement System.out.println ( (expression (atom (nonAtom root) . Search ( (callList (rightValue (expression (atom 12)))) ))) ) ;)) (statement (printStatement System.out.println ( (expression (atom (nonAtom root) . Search ( (callList (rightValue (expression (atom 16)))) ))) ) ;)) (statement (printStatement System.out.println ( (expression (atom (nonAtom root) . Search ( (callList (rightValue (expression (atom 50)))) ))) ) ;)) (statement (printStatement System.out.println ( (expression (atom (nonAtom root) . Search ( (callList (rightValue (expression (atom 12)))) ))) ) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom root) . Delete ( (callList (rightValue (expression (atom 12)))) )))) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom root) . Print ( )))) ;)) (statement (printStatement System.out.println ( (expression (atom (nonAtom root) . Search ( (callList (rightValue (expression (atom 12)))) ))) ) ;)) return (rightValue (expression (atom 0))) ; }) }) (classDeclaration class Tree { (varDeclaration (type Tree) left ;) (varDeclaration (type Tree) right ;) (varDeclaration (type int) key ;) (varDeclaration (type boolean) has_left ;) (varDeclaration (type boolean) has_right ;) (varDeclaration (type Tree) my_null ;) (methodDeclaration public (type boolean) Init ( (paramList (type int) v_key) ) { (statement (assignment key = (rightValue (expression (atom v_key))) ;)) (statement (assignment has_left = (rightValue (expression (atom false))) ;)) (statement (assignment has_right = (rightValue (expression (atom false))) ;)) return (rightValue (expression (atom true))) ; }) (methodDeclaration public (type boolean) SetRight ( (paramList (type Tree) rn) ) { (statement (assignment right = (rightValue (expression (atom rn))) ;)) return (rightValue (expression (atom true))) ; }) (methodDeclaration public (type boolean) SetLeft ( (paramList (type Tree) ln) ) { (statement (assignment left = (rightValue (expression (atom ln))) ;)) return (rightValue (expression (atom true))) ; }) (methodDeclaration public (type Tree) GetRight ( ) { return (rightValue (expression (atom right))) ; }) (methodDeclaration public (type Tree) GetLeft ( ) { return (rightValue (expression (atom left))) ; }) (methodDeclaration public (type int) GetKey ( ) { return (rightValue (expression (atom key))) ; }) (methodDeclaration public (type boolean) SetKey ( (paramList (type int) v_key) ) { (statement (assignment key = (rightValue (expression (atom v_key))) ;)) return (rightValue (expression (atom true))) ; }) (methodDeclaration public (type boolean) GetHas_Right ( ) { return (rightValue (expression (atom has_right))) ; }) (methodDeclaration public (type boolean) GetHas_Left ( ) { return (rightValue (expression (atom has_left))) ; }) (methodDeclaration public (type boolean) SetHas_Left ( (paramList (type boolean) val) ) { (statement (assignment has_left = (rightValue (expression (atom val))) ;)) return (rightValue (expression (atom true))) ; }) (methodDeclaration public (type boolean) SetHas_Right ( (paramList (type boolean) val) ) { (statement (assignment has_right = (rightValue (expression (atom val))) ;)) return (rightValue (expression (atom true))) ; }) (methodDeclaration public (type boolean) Compare ( (paramList (type int) num1 , (paramList (type int) num2)) ) { (varDeclaration (type boolean) ntb ;) (varDeclaration (type int) nti ;) (statement (assignment ntb = (rightValue (expression (atom false))) ;)) (statement (assignment nti = (rightValue (expression (sumExpr (atom num2) + (atom 1)))) ;)) (statement (ifStatement if ( (expression (compareExpr (atom num1) < (atom num2))) ) (statement (assignment ntb = (rightValue (expression (atom false))) ;)) else (statement (ifStatement if ( (expression (atom ! (atom ( (expression (compareExpr (atom num1) < (atom nti))) )))) ) (statement (assignment ntb = (rightValue (expression (atom false))) ;)) else (statement (assignment ntb = (rightValue (expression (atom true))) ;)))))) return (rightValue (expression (atom ntb))) ; }) (methodDeclaration public (type boolean) Insert ( (paramList (type int) v_key) ) { (varDeclaration (type Tree) new_node ;) (varDeclaration (type boolean) ntb ;) (varDeclaration (type boolean) cont ;) (varDeclaration (type int) key_aux ;) (varDeclaration (type Tree) current_node ;) (statement (assignment new_node = (rightValue (nonAtom new Tree ( ))) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom new_node) . Init ( (callList (rightValue (expression (atom v_key)))) )))) ;)) (statement (assignment current_node = (rightValue (nonAtom this)) ;)) (statement (assignment cont = (rightValue (expression (atom true))) ;)) (statement (whileStatement while ( (expression (atom cont)) ) (statement { (statement (assignment key_aux = (rightValue (expression (atom (nonAtom current_node) . GetKey ( )))) ;)) (statement (ifStatement if ( (expression (compareExpr (atom v_key) < (atom key_aux))) ) (statement { (statement (ifStatement if ( (expression (atom (nonAtom current_node) . GetHas_Left ( ))) ) (statement (assignment current_node = (rightValue (expression (atom (nonAtom current_node) . GetLeft ( )))) ;)) else (statement { (statement (assignment cont = (rightValue (expression (atom false))) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom current_node) . SetHas_Left ( (callList (rightValue (expression (atom true)))) )))) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom current_node) . SetLeft ( (callList (rightValue (expression (atom new_node)))) )))) ;)) }))) }) else (statement { (statement (ifStatement if ( (expression (atom (nonAtom current_node) . GetHas_Right ( ))) ) (statement (assignment current_node = (rightValue (expression (atom (nonAtom current_node) . GetRight ( )))) ;)) else (statement { (statement (assignment cont = (rightValue (expression (atom false))) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom current_node) . SetHas_Right ( (callList (rightValue (expression (atom true)))) )))) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom current_node) . SetRight ( (callList (rightValue (expression (atom new_node)))) )))) ;)) }))) }))) }))) return (rightValue (expression (atom true))) ; }) (methodDeclaration public (type boolean) Delete ( (paramList (type int) v_key) ) { (varDeclaration (type Tree) current_node ;) (varDeclaration (type Tree) parent_node ;) (varDeclaration (type boolean) cont ;) (varDeclaration (type boolean) found ;) (varDeclaration (type boolean) is_root ;) (varDeclaration (type int) key_aux ;) (varDeclaration (type boolean) ntb ;) (statement (assignment current_node = (rightValue (nonAtom this)) ;)) (statement (assignment parent_node = (rightValue (nonAtom this)) ;)) (statement (assignment cont = (rightValue (expression (atom true))) ;)) (statement (assignment found = (rightValue (expression (atom false))) ;)) (statement (assignment is_root = (rightValue (expression (atom true))) ;)) (statement (whileStatement while ( (expression (atom cont)) ) (statement { (statement (assignment key_aux = (rightValue (expression (atom (nonAtom current_node) . GetKey ( )))) ;)) (statement (ifStatement if ( (expression (compareExpr (atom v_key) < (atom key_aux))) ) (statement (ifStatement if ( (expression (atom (nonAtom current_node) . GetHas_Left ( ))) ) (statement { (statement (assignment parent_node = (rightValue (expression (atom current_node))) ;)) (statement (assignment current_node = (rightValue (expression (atom (nonAtom current_node) . GetLeft ( )))) ;)) }) else (statement (assignment cont = (rightValue (expression (atom false))) ;)))) else (statement (ifStatement if ( (expression (compareExpr (atom key_aux) < (atom v_key))) ) (statement (ifStatement if ( (expression (atom (nonAtom current_node) . GetHas_Right ( ))) ) (statement { (statement (assignment parent_node = (rightValue (expression (atom current_node))) ;)) (statement (assignment current_node = (rightValue (expression (atom (nonAtom current_node) . GetRight ( )))) ;)) }) else (statement (assignment cont = (rightValue (expression (atom false))) ;)))) else (statement { (statement (ifStatement if ( (expression (atom is_root)) ) (statement (ifStatement if ( (expression (andExpr (atom ( (expression (atom ! (atom (nonAtom current_node) . GetHas_Right ( )))) )) && (atom ( (expression (atom ! (atom (nonAtom current_node) . GetHas_Left ( )))) )))) ) (statement (assignment ntb = (rightValue (expression (atom true))) ;)) else (statement (assignment ntb = (rightValue (expression (atom (nonAtom this) . Remove ( (callList (rightValue (expression (atom parent_node))) , (callList (rightValue (expression (atom current_node))))) )))) ;)))) else (statement (assignment ntb = (rightValue (expression (atom (nonAtom this) . Remove ( (callList (rightValue (expression (atom parent_node))) , (callList (rightValue (expression (atom current_node))))) )))) ;)))) (statement (assignment found = (rightValue (expression (atom true))) ;)) (statement (assignment cont = (rightValue (expression (atom false))) ;)) }))))) (statement (assignment is_root = (rightValue (expression (atom false))) ;)) }))) return (rightValue (expression (atom found))) ; }) (methodDeclaration public (type boolean) Remove ( (paramList (type Tree) p_node , (paramList (type Tree) c_node)) ) { (varDeclaration (type boolean) ntb ;) (varDeclaration (type int) auxkey1 ;) (varDeclaration (type int) auxkey2 ;) (statement (ifStatement if ( (expression (atom (nonAtom c_node) . GetHas_Left ( ))) ) (statement (assignment ntb = (rightValue (expression (atom (nonAtom this) . RemoveLeft ( (callList (rightValue (expression (atom p_node))) , (callList (rightValue (expression (atom c_node))))) )))) ;)) else (statement (ifStatement if ( (expression (atom (nonAtom c_node) . GetHas_Right ( ))) ) (statement (assignment ntb = (rightValue (expression (atom (nonAtom this) . RemoveRight ( (callList (rightValue (expression (atom p_node))) , (callList (rightValue (expression (atom c_node))))) )))) ;)) else (statement { (statement (assignment auxkey1 = (rightValue (expression (atom (nonAtom c_node) . GetKey ( )))) ;)) (statement (assignment auxkey2 = (rightValue (expression (atom (nonAtom ( (expression (atom (nonAtom p_node) . GetLeft ( ))) )) . GetKey ( )))) ;)) (statement (ifStatement if ( (expression (atom (nonAtom this) . Compare ( (callList (rightValue (expression (atom auxkey1))) , (callList (rightValue (expression (atom auxkey2))))) ))) ) (statement { (statement (assignment ntb = (rightValue (expression (atom (nonAtom p_node) . SetLeft ( (callList (rightValue (expression (atom my_null)))) )))) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom p_node) . SetHas_Left ( (callList (rightValue (expression (atom false)))) )))) ;)) }) else (statement { (statement (assignment ntb = (rightValue (expression (atom (nonAtom p_node) . SetRight ( (callList (rightValue (expression (atom my_null)))) )))) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom p_node) . SetHas_Right ( (callList (rightValue (expression (atom false)))) )))) ;)) }))) }))))) return (rightValue (expression (atom true))) ; }) (methodDeclaration public (type boolean) RemoveRight ( (paramList (type Tree) p_node , (paramList (type Tree) c_node)) ) { (varDeclaration (type boolean) ntb ;) (statement (whileStatement while ( (expression (atom (nonAtom c_node) . GetHas_Right ( ))) ) (statement { (statement (assignment ntb = (rightValue (expression (atom (nonAtom c_node) . SetKey ( (callList (rightValue (expression (atom (nonAtom ( (expression (atom (nonAtom c_node) . GetRight ( ))) )) . GetKey ( ))))) )))) ;)) (statement (assignment p_node = (rightValue (expression (atom c_node))) ;)) (statement (assignment c_node = (rightValue (expression (atom (nonAtom c_node) . GetRight ( )))) ;)) }))) (statement (assignment ntb = (rightValue (expression (atom (nonAtom p_node) . SetRight ( (callList (rightValue (expression (atom my_null)))) )))) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom p_node) . SetHas_Right ( (callList (rightValue (expression (atom false)))) )))) ;)) return (rightValue (expression (atom true))) ; }) (methodDeclaration public (type boolean) RemoveLeft ( (paramList (type Tree) p_node , (paramList (type Tree) c_node)) ) { (varDeclaration (type boolean) ntb ;) (statement (whileStatement while ( (expression (atom (nonAtom c_node) . GetHas_Left ( ))) ) (statement { (statement (assignment ntb = (rightValue (expression (atom (nonAtom c_node) . SetKey ( (callList (rightValue (expression (atom (nonAtom ( (expression (atom (nonAtom c_node) . GetLeft ( ))) )) . GetKey ( ))))) )))) ;)) (statement (assignment p_node = (rightValue (expression (atom c_node))) ;)) (statement (assignment c_node = (rightValue (expression (atom (nonAtom c_node) . GetLeft ( )))) ;)) }))) (statement (assignment ntb = (rightValue (expression (atom (nonAtom p_node) . SetLeft ( (callList (rightValue (expression (atom my_null)))) )))) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom p_node) . SetHas_Left ( (callList (rightValue (expression (atom false)))) )))) ;)) return (rightValue (expression (atom true))) ; }) (methodDeclaration public (type int) Search ( (paramList (type int) v_key) ) { (varDeclaration (type boolean) cont ;) (varDeclaration (type int) ifound ;) (varDeclaration (type Tree) current_node ;) (varDeclaration (type int) key_aux ;) (statement (assignment current_node = (rightValue (nonAtom this)) ;)) (statement (assignment cont = (rightValue (expression (atom true))) ;)) (statement (assignment ifound = (rightValue (expression (atom 0))) ;)) (statement (whileStatement while ( (expression (atom cont)) ) (statement { (statement (assignment key_aux = (rightValue (expression (atom (nonAtom current_node) . GetKey ( )))) ;)) (statement (ifStatement if ( (expression (compareExpr (atom v_key) < (atom key_aux))) ) (statement (ifStatement if ( (expression (atom (nonAtom current_node) . GetHas_Left ( ))) ) (statement (assignment current_node = (rightValue (expression (atom (nonAtom current_node) . GetLeft ( )))) ;)) else (statement (assignment cont = (rightValue (expression (atom false))) ;)))) else (statement (ifStatement if ( (expression (compareExpr (atom key_aux) < (atom v_key))) ) (statement (ifStatement if ( (expression (atom (nonAtom current_node) . GetHas_Right ( ))) ) (statement (assignment current_node = (rightValue (expression (atom (nonAtom current_node) . GetRight ( )))) ;)) else (statement (assignment cont = (rightValue (expression (atom false))) ;)))) else (statement { (statement (assignment ifound = (rightValue (expression (atom 1))) ;)) (statement (assignment cont = (rightValue (expression (atom false))) ;)) }))))) }))) return (rightValue (expression (atom ifound))) ; }) (methodDeclaration public (type boolean) Print ( ) { (varDeclaration (type Tree) current_node ;) (varDeclaration (type boolean) ntb ;) (statement (assignment current_node = (rightValue (nonAtom this)) ;)) (statement (assignment ntb = (rightValue (expression (atom (nonAtom this) . RecPrint ( (callList (rightValue (expression (atom current_node)))) )))) ;)) return (rightValue (expression (atom true))) ; }) (methodDeclaration public (type boolean) RecPrint ( (paramList (type Tree) node) ) { (varDeclaration (type boolean) ntb ;) (statement (ifStatement if ( (expression (atom (nonAtom node) . GetHas_Left ( ))) ) (statement { (statement (assignment ntb = (rightValue (expression (atom (nonAtom this) . RecPrint ( (callList (rightValue (expression (atom (nonAtom node) . GetLeft ( ))))) )))) ;)) }) else (statement (assignment ntb = (rightValue (expression (atom true))) ;)))) (statement (printStatement System.out.println ( (expression (atom (nonAtom node) . GetKey ( ))) ) ;)) (statement (ifStatement if ( (expression (atom (nonAtom node) . GetHas_Right ( ))) ) (statement { (statement (assignment ntb = (rightValue (expression (atom (nonAtom this) . RecPrint ( (callList (rightValue (expression (atom (nonAtom node) . GetRight ( ))))) )))) ;)) }) else (statement (assignment ntb = (rightValue (expression (atom true))) ;)))) return (rightValue (expression (atom true))) ; }) }) <EOF>)
